package supul.controll;

import java.io.IOException;
import java.io.UnsupportedEncodingException;



import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.annotation.Resource;
import jakarta.servlet.http.HttpSession;
import net.nurigo.sdk.NurigoApp;
import net.nurigo.sdk.message.exception.NurigoMessageNotReceivedException;
import net.nurigo.sdk.message.model.Message;
import net.nurigo.sdk.message.request.SingleMessageSendingRequest;
import net.nurigo.sdk.message.service.DefaultMessageService;
import supul.mapper.ThemaMapper;
import supul.model.Branch;
import supul.model.PageData;
import supul.model.Pay;
import supul.model.Ranking;
import supul.model.Reservation;
import supul.model.RvPay;
import supul.model.Thema;
import supul.model.User;
import supul.repository.BranchRepository;
import supul.repository.PayRepository;
import supul.repository.RankingRepository;
import supul.repository.ReservationRepository;
import supul.repository.RvPayRepository;
import supul.repository.ThemaRepository;
import supul.repository.UserRepository;

import supul.service.SaleService;

@Controller
@RequestMapping("reserve")
public class ReserveController {

	@Autowired
	private SaleService stat;
	@Autowired
	ThemaMapper themaMapper;
	@Autowired
	UserRepository userRepository;
	@Resource
	ReservationRepository ReservationRepository;
	@Resource
	BranchRepository branchRepository;
	@Resource
	ThemaRepository themaRepository;
	@Resource
	PayRepository payRepository;
	@Resource
	RankingRepository rankingRepository;
	@Resource
	RvPayRepository rvPayRepository;
	@GetMapping("/rvForm")
	String reservationg(Model model, Thema thema, HttpSession session,Reservation tv,
			@RequestParam("themaId") int themaId,
			@RequestParam(value = "picktime") LocalTime picktime,
			@RequestParam(value = "date", required = false) LocalDate date
			) {

		System.out.println(themaId);
		Optional<Thema> opthema = themaRepository.findById(themaId);
		if (opthema.isPresent()) {
			thema = opthema.get();
		} else {
			
		}

		System.out.println(thema);
		model.addAttribute("thema", thema);
		model.addAttribute("date", date);
		model.addAttribute("picktime", picktime);

		System.out.println(session.getAttribute("username"));

		// reservation에 들어갈거

		List<LocalTime> timeLists = themaMapper.timetableList(themaId);
		// System.out.println("시간들 =>"+timeLists);

		if (picktime.equals(timeLists.get(0)) || picktime.equals(timeLists.get(timeLists.size() - 1))) {
			model.addAttribute("price", (int) (thema.getPrice() * 0.8 / 1000) * 1000);
			System.out.println("첫타임, 막타임! => " + (int) (thema.getPrice() * 0.8 / 1000) * 1000);
		} else {
			model.addAttribute("price", thema.getPrice());
		}
		model.addAttribute("rvPrice", (int) (thema.getPrice() * 0.2 / 1000) * 1000);
		;

		User user = (User) session.getAttribute("user");
		System.out.println(user);
		model.addAttribute("user", user);

		return "reserve/reserveForm";
	}

	@PostMapping("/rvReg")
	String reservation_OK(Model model,  int themaId, Thema thema, Reservation rv,
			@RequestParam("rvPeople") int rvPeople, PageData pageData,
			HttpSession session) {

		
		
		int id = (int) session.getAttribute("Id");
		Optional<User> Ouser = userRepository.findById(id);
		User user = new User();
		if (Ouser.isPresent()) {
			user = Ouser.get();
		} 
		
		// 예약번호 생성을 위한 포맷작업
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyMMdd");
				String datenum = (String) LocalDate.now().format(formatter);
		Random ran = new Random();
		// 중복 없으면 예약번호 생성 아니면 재생성
		while (true) {
			int i = ran.nextInt(1, 10000);

			String rvnum = datenum + String.format("%04d", i); // int i 5여도 0005 로 나오게 변환
			// System.out.println("중복처리 전 rvnum: "+rvnum);
			int cnt = themaMapper.chkrvnum(rvnum);
			if (cnt == 0) {
				// System.out.println("중복처리 후 rvnum: "+rvnum);
				rv.setRvNum(rvnum);
				model.addAttribute("rvnum", rvnum);
				break;
			}
		}
		
		Optional<Thema> opthema = themaRepository.findById(themaId);
		if (opthema.isPresent()) {
			thema = opthema.get();
		}
		Optional<Branch> a = branchRepository.findById(thema.getBranch().getBranchId());
		Branch branch = a.get();
		rv.setRvDate(LocalDateTime.now());
		rv.setThema(thema);
		rv.setUser(user);
		rv.setBranch(branch);
		rv.setUserName(user.getUserName());
		session.setAttribute("rv", rv);
		

		pageData.setMsg("결제 창으로 넘어갑니다!");
		pageData.setGoUrl("/reserve/pay/" + rv.getRvNum());
		return "inc/alert";
	
	}

	@RequestMapping("/pay/{rvNum}")
	public String pay(Model model, @PathVariable String rvNum, HttpSession session) {

		Reservation rv = (Reservation)session.getAttribute("rv");
		
		
		model.addAttribute("rv", rv);
		model.addAttribute("user", session.getAttribute("user"));
		model.addAttribute("username", session.getAttribute("username"));

		
		return "reserve/reserveReg";
	}
	
	@PostMapping("/pay/completed2")
	public String paycompleted(Model model, @PathVariable String rvNum, HttpSession session  ) {

		Reservation rv = (Reservation)session.getAttribute("rv");
		ReservationRepository.save(rv);
		model.addAttribute("rv", rv);
		model.addAttribute("user", session.getAttribute("user"));
		model.addAttribute("username", session.getAttribute("username"));

		return "reserve/complete";
	}

    @PostMapping("/pay_completed")
    public String paycompletedkakao(@RequestBody RvPay paymentInfo) {
        
    	try {
			URL address =new URL("https://kapi.kakao.com/v1/payment/ready");
			 HttpURLConnection server = (HttpURLConnection) address.openConnection();
			 server.setRequestMethod("POST"); 
			 server.setRequestProperty("Authorization", "KakaoAk 209dbebe462b683928e5ce99141eb126");
    	} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	return "{\"result\":\"NO\"}";
    }
	
	
	
	
	
	// 예약확인
	@RequestMapping("checkRv")
	String checkreservation(Model model, HttpSession session, PageData pageData) {
		model.addAttribute("username", session.getAttribute("username"));
		if (session.getAttribute("Id") == null) {
			pageData.setMsg("로그인이 필요합니다!");
			pageData.setGoUrl("/user/login");
			return "inc/alert";
		}

		int userId = (int) session.getAttribute("Id");
		List<Reservation> rvList = ReservationRepository.findAllUpcomingReservationsForUser(userId, LocalDate.now());
		// System.out.println("나오냐 "+rvList);

		model.addAttribute("nowdate", LocalDate.now());
		model.addAttribute("nowtime", LocalTime.now());
		model.addAttribute("rvList", rvList);
		model.addAttribute("session", session);
		model.addAttribute("userName", (String) session.getAttribute("username"));
		return "reserve/checkRv";
	}

	// 예약취소
	@RequestMapping("/cancleRv")
	String cancleRv(Model mm, Reservation rv, HttpSession session, PageData pageData) {// 파라미터값이 매개변수랑 이름이 똑같으면 알아서 들어감
		mm.addAttribute("userName", (String) session.getAttribute("username"));
		System.out.println("rv:" + rv);
		pageData.setMsg("예약 취소 실패.. ㅠㅠ");
		pageData.setGoUrl("checkRv");

		Reservation rvDTO = themaMapper.confirmRv(rv);

		System.out.println("rvDTO:" + rvDTO);
		int res = themaMapper.cancleRv(rvDTO);
		if (res > 0) {
			pageData.setMsg("예약 취소 성공!!!");
			pageData.setGoUrl("/thema/checkRv");
			return "inc/alert";
		}
		return "inc/alert";
	}
	

		
		@RequestMapping("tonggye/{branchName}")
		public String chart (Model model, @PathVariable String branchName, HttpSession session,
				@RequestParam(name = "startDate", required = false ) LocalDate startDate,
				@RequestParam(name = "endDate", required = false )  LocalDate endDate,
				@PageableDefault(size = 20,sort = "rvDate" , direction = Direction.DESC ) Pageable pageable,
				@RequestParam(name = "sortBy", defaultValue = "rvId") String sortBy) {
			pageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(),
		            Sort.by(Sort.Direction.ASC, sortBy)); 
				
				model.addAttribute("userRole", session.getAttribute("userRole"));
				Branch branch =branchRepository.findByName(branchName);
				System.out.println(branch);
				System.out.println(branchName);
			 Page<Reservation> searchList;
				if( branchName.equals("전체")||branchName ==null) {  
					 searchList = ReservationRepository.findAll( pageable);
				}else {
					 searchList = stat.searchbr(branch, pageable);
				}
			
				BigDecimal totalSalesPrice = stat.totalSales(startDate, endDate);
				model.addAttribute("salesData", totalSalesPrice);

				List<Object[]> thema_price = ReservationRepository.thema_price();
				model.addAttribute("thema_price", thema_price);

				

				List<Object[]> date_price = ReservationRepository.date_price();
				model.addAttribute("date_price", date_price);

				Object[] branch_Total = stat.branch_Total(branchName);
				model.addAttribute("branch_Total", branch_Total);

				List<Object[]> branchListTotal = ReservationRepository.branchListTotal();
				model.addAttribute("branchListTotal", branchListTotal);

				List<Object[]> branchThemaTotal = stat.branchThemaTotal(branchName);
				model.addAttribute("branchThemaTotal", branchThemaTotal);
	 			
				
				
				model.addAttribute("branch" , branch);
				List<Object[]> thematotal = stat.themaTotal(startDate, endDate);
				model.addAttribute("thematotal" ,thematotal);
				List<Object[]> total = stat.total(startDate, endDate);
				model.addAttribute("total" , total);
				List<Object[]> branchtotal = stat.branchTotal(startDate, endDate);
				model.addAttribute("branchtotal" , branchtotal);
				
				Map<YearMonth, Map<String, Integer>> monthlyData = new HashMap<>();
				
				// totalData를 반복하고 월별로 그룹화하여 저장
				for (Object[] row : total) {
				    String themaName = (String) row[0];
				    Integer totalPrice = ((Number) row[1]).intValue(); // Object를 Integer로 변환

				    LocalDateTime dateTime = (LocalDateTime) row[2];
				    YearMonth yearMonth = YearMonth.from(dateTime);
				    
				    // 해당 월에 대한 Map이 없으면 생성
				    monthlyData.putIfAbsent(yearMonth, new HashMap<>());

				    // 테마별 가격을 해당 월에 추가 또는 누적
				    monthlyData.get(yearMonth).put(themaName, monthlyData.get(yearMonth).getOrDefault(themaName, 0) + totalPrice);
				}

				// 월별로 테마별 가격 출력 또는 사용
				for (Map.Entry<YearMonth, Map<String, Integer>> entry : monthlyData.entrySet()) {
				    YearMonth yearMonth = entry.getKey();
				    Map<String, Integer> monthlyTotal = entry.getValue();

				   
				    //System.out.println("월: " + yearMonth.toString());
				    for (Map.Entry<String, Integer> totalEntry : monthlyTotal.entrySet()) {
				        String themaName = totalEntry.getKey();
				        Integer totalPrice = totalEntry.getValue();
				        //System.out.println("테마: " + themaName + ", 가격: " + totalPrice);
				    }
				}
				ObjectMapper objectMapper = new ObjectMapper();
				String monthlyDataJson = null;
				try {
					monthlyDataJson = objectMapper.writeValueAsString(monthlyData);
				} catch (JsonProcessingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				model.addAttribute("monthlyDataJson", monthlyDataJson);
			
			List<Reservation> rvList =  ReservationRepository.findAll();
			List<Branch> branchList = branchRepository.findAll();
			List<Object[]> thema_priceDate = stat.thema_price(startDate, endDate);
			 String admin = (String) session.getAttribute("branchName");
				model.addAttribute("admin", admin);
			model.addAttribute("thema_priceDate", thema_priceDate);
			model.addAttribute("branchList", branchList);
			model.addAttribute("startDate", startDate);
			model.addAttribute("endDate", endDate);
			model.addAttribute("sortBy", sortBy);
			model.addAttribute("searchList", searchList);
			model.addAttribute("branchName", branchName);
			model.addAttribute("monthlyData", monthlyData);
			return "pay/tonggye";
	        
		}
		@RequestMapping("paytonggye/{branchName}")
		public String paychart (Model model, @PathVariable String branchName, HttpSession session,
				@RequestParam(name = "startDate", required = false ) LocalDate startDate,
				@RequestParam(name = "endDate", required = false )  LocalDate endDate,
				@PageableDefault(size = 20,sort = "rvDate" , direction = Direction.DESC ) Pageable pageable,
				@RequestParam(name = "sortBy", defaultValue = "rvId") String sortBy) {
			pageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(),
		            Sort.by(Sort.Direction.ASC, sortBy)); 
				
				model.addAttribute("userRole", session.getAttribute("userRole"));
				Branch branch =branchRepository.findByName(branchName);
				System.out.println(branch);
				System.out.println(branchName);
			 Page<Reservation> searchList;
				if( branchName.equals("전체")||branchName ==null) {  
					 searchList = ReservationRepository.findAll( pageable);
				}else {
					 searchList = ReservationRepository.findByBranch(branch, pageable);
				}
			
				BigDecimal totalSalesPrice = payRepository.TotalSales(startDate, endDate);
				model.addAttribute("salesData", totalSalesPrice);

				List<Object[]> thema_price = payRepository.thema_price();
				model.addAttribute("thema_price", thema_price);

				
				
				model.addAttribute("branch" , branch);
				List<Object[]> thematotal = payRepository.themaTotal(startDate, endDate);
				model.addAttribute("thematotal" ,thematotal);
				List<Object[]> total = payRepository.Total(startDate, endDate);
				model.addAttribute("total" , total);
				List<Object[]> branchtotal = payRepository.branchTotal(startDate, endDate);
				model.addAttribute("branchtotal" , branchtotal);
				
				Map<YearMonth, Map<String, Integer>> monthlyData = new HashMap<>();
				
				// totalData를 반복하고 월별로 그룹화하여 저장
				for (Object[] row : total) {
				    String themaName = (String) row[0];
				    Integer totalPrice = ((Number) row[1]).intValue(); // Object를 Integer로 변환

				    LocalDateTime dateTime = (LocalDateTime) row[2];
				    YearMonth yearMonth = YearMonth.from(dateTime);
				    
				    // 해당 월에 대한 Map이 없으면 생성
				    monthlyData.putIfAbsent(yearMonth, new HashMap<>());

				    // 테마별 가격을 해당 월에 추가 또는 누적
				    monthlyData.get(yearMonth).put(themaName, monthlyData.get(yearMonth).getOrDefault(themaName, 0) + totalPrice);
				}

				// 월별로 테마별 가격 출력 또는 사용
				for (Map.Entry<YearMonth, Map<String, Integer>> entry : monthlyData.entrySet()) {
				    YearMonth yearMonth = entry.getKey();
				    Map<String, Integer> monthlyTotal = entry.getValue();

				   
				    //System.out.println("월: " + yearMonth.toString());
				    for (Map.Entry<String, Integer> totalEntry : monthlyTotal.entrySet()) {
				        String themaName = totalEntry.getKey();
				        Integer totalPrice = totalEntry.getValue();
				        //System.out.println("테마: " + themaName + ", 가격: " + totalPrice);
				    }
				}
				ObjectMapper objectMapper = new ObjectMapper();
				String monthlyDataJson = null;
				try {
					monthlyDataJson = objectMapper.writeValueAsString(monthlyData);
				} catch (JsonProcessingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				model.addAttribute("monthlyDataJson", monthlyDataJson);
			
			List<Reservation> rvList =  ReservationRepository.findAll();
			List<Branch> branchList = branchRepository.findAll();
		
			 String admin = (String) session.getAttribute("branchName");
				model.addAttribute("admin", admin);
		
			model.addAttribute("branchList", branchList);
			model.addAttribute("startDate", startDate);
			model.addAttribute("endDate", endDate);
			model.addAttribute("sortBy", sortBy);
			model.addAttribute("searchList", searchList);
			model.addAttribute("branchName", branchName);
			model.addAttribute("monthlyData", monthlyData);
			return "pay/paytonggye";
	        
		}		
		
	
}

